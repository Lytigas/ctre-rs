/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub mod ctre {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod phoenix {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            impl root::ctre::phoenix::ErrorCode {
                pub const OKAY: root::ctre::phoenix::ErrorCode = ErrorCode::OK;
            }
            impl root::ctre::phoenix::ErrorCode {
                pub const TxFailed: root::ctre::phoenix::ErrorCode = ErrorCode::CAN_TX_FULL;
            }
            impl root::ctre::phoenix::ErrorCode {
                pub const CAN_INVALID_PARAM: root::ctre::phoenix::ErrorCode =
                    ErrorCode::InvalidParamValue;
            }
            impl root::ctre::phoenix::ErrorCode {
                pub const CAN_MSG_NOT_FOUND: root::ctre::phoenix::ErrorCode = ErrorCode::RxTimeout;
            }
            impl root::ctre::phoenix::ErrorCode {
                pub const CAN_NO_MORE_TX_JOBS: root::ctre::phoenix::ErrorCode =
                    ErrorCode::TxTimeout;
            }
            impl root::ctre::phoenix::ErrorCode {
                pub const CAN_NO_SESSIONS_AVAIL: root::ctre::phoenix::ErrorCode =
                    ErrorCode::UnexpectedArbId;
            }
            impl root::ctre::phoenix::ErrorCode {
                pub const GENERAL_ERROR: root::ctre::phoenix::ErrorCode = ErrorCode::GeneralError;
            }
            impl root::ctre::phoenix::ErrorCode {
                pub const SigNotUpdated: root::ctre::phoenix::ErrorCode =
                    ErrorCode::SIG_NOT_UPDATED;
            }
            impl root::ctre::phoenix::ErrorCode {
                pub const TalonFeatureRequiresHigherFirm: root::ctre::phoenix::ErrorCode =
                    ErrorCode::MotorControllerFeatureRequiresHigherFirm;
            }
            impl root::ctre::phoenix::ErrorCode {
                pub const AuxiliaryPIDNotSupportedYet: root::ctre::phoenix::ErrorCode =
                    ErrorCode::CascadedPIDNotSupporteYet;
            }
            #[repr(i32)]
            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
            pub enum ErrorCode {
                OK = 0,
                CAN_MSG_STALE = 1,
                CAN_TX_FULL = -1,
                ///!< Caller passed an invalid param
                InvalidParamValue = -2,
                ///!< CAN frame has not been received within specified period of time.
                RxTimeout = -3,
                ///!< Not used.
                TxTimeout = -4,
                ///!< Specified CAN Id is invalid.
                UnexpectedArbId = -5,
                ///!< Caller attempted to insert data into a buffer that is full.
                BufferFull = 6,
                CAN_OVERFLOW = -6,
                ///!< Sensor is not present
                SensorNotPresent = -7,
                FirmwareTooOld = -8,
                CouldNotChangePeriod = -9,
                BufferFailure = -10,
                FirwmwareNonFRC = -11,
                ///!< User Specified General Error
                GeneralError = -100,
                SIG_NOT_UPDATED = -200,
                NotAllPIDValuesUpdated = -201,
                GEN_PORT_ERROR = -300,
                PORT_MODULE_TYPE_MISMATCH = -301,
                GEN_MODULE_ERROR = -400,
                MODULE_NOT_INIT_SET_ERROR = -401,
                MODULE_NOT_INIT_GET_ERROR = -402,
                WheelRadiusTooSmall = -500,
                TicksPerRevZero = -501,
                DistanceBetweenWheelsTooSmall = -502,
                GainsAreNotSet = -503,
                WrongRemoteLimitSwitchSource = -504,
                IncompatibleMode = -600,
                ///!< Handle does not match stored map of handles
                InvalidHandle = -601,
                FeatureRequiresHigherFirm = -700,
                MotorControllerFeatureRequiresHigherFirm = -701,
                ConfigFactoryDefaultRequiresHigherFirm = -702,
                LibraryCouldNotBeLoaded = -800,
                MissingRoutineInLibrary = -801,
                ResourceNotAvailable = -802,
                ///!< Special Code for "isSensorPresent"
                PulseWidthSensorNotPresent = 10,
                GeneralWarning = 100,
                FeatureNotSupported = 101,
                NotImplemented = 102,
                FirmVersionCouldNotBeRetrieved = 103,
                FeaturesNotAvailableYet = 104,
                ControlModeNotValid = 105,
                ControlModeNotSupportedYet = 106,
                CascadedPIDNotSupporteYet = 107,
                RemoteSensorsNotSupportedYet = 108,
                MotProfFirmThreshold = 109,
                MotProfFirmThreshold2 = 110,
            }
            impl root::ctre::phoenix::ParamEnum {
                pub const eClearPosOnLimitF: root::ctre::phoenix::ParamEnum =
                    ParamEnum::eClearPositionOnLimitF;
            }
            impl root::ctre::phoenix::ParamEnum {
                pub const eClearPosOnLimitR: root::ctre::phoenix::ParamEnum =
                    ParamEnum::eClearPositionOnLimitR;
            }
            impl root::ctre::phoenix::ParamEnum {
                pub const eClearPositionOnIdx: root::ctre::phoenix::ParamEnum =
                    ParamEnum::eClearPositionOnQuadIdx;
            }
            #[repr(u32)]
            /// Signal enumeration for generic signal access.
            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
            pub enum ParamEnum {
                eOnBoot_BrakeMode = 31,
                eQuadFilterEn = 91,
                eQuadIdxPolarity = 108,
                eMotionProfileHasUnderrunErr = 119,
                eMotionProfileTrajectoryPointDurationMs = 120,
                eMotionProfileTrajectoryInterpolDis = 121,
                eStatusFramePeriod = 300,
                eOpenloopRamp = 301,
                eClosedloopRamp = 302,
                eNeutralDeadband = 303,
                ePeakPosOutput = 305,
                eNominalPosOutput = 306,
                ePeakNegOutput = 307,
                eNominalNegOutput = 308,
                eProfileParamSlot_P = 310,
                eProfileParamSlot_I = 311,
                eProfileParamSlot_D = 312,
                eProfileParamSlot_F = 313,
                eProfileParamSlot_IZone = 314,
                eProfileParamSlot_AllowableErr = 315,
                eProfileParamSlot_MaxIAccum = 316,
                eProfileParamSlot_PeakOutput = 317,
                eClearPositionOnLimitF = 320,
                eClearPositionOnLimitR = 321,
                eClearPositionOnQuadIdx = 322,
                eSampleVelocityPeriod = 325,
                eSampleVelocityWindow = 326,
                eFeedbackSensorType = 330,
                eSelectedSensorPosition = 331,
                eFeedbackNotContinuous = 332,
                eRemoteSensorSource = 333,
                eRemoteSensorDeviceID = 334,
                eSensorTerm = 335,
                eRemoteSensorClosedLoopDisableNeutralOnLOS = 336,
                ePIDLoopPolarity = 337,
                ePIDLoopPeriod = 338,
                eSelectedSensorCoefficient = 339,
                eForwardSoftLimitThreshold = 340,
                eReverseSoftLimitThreshold = 341,
                eForwardSoftLimitEnable = 342,
                eReverseSoftLimitEnable = 343,
                eNominalBatteryVoltage = 350,
                eBatteryVoltageFilterSize = 351,
                eContinuousCurrentLimitAmps = 360,
                ePeakCurrentLimitMs = 361,
                ePeakCurrentLimitAmps = 362,
                eClosedLoopIAccum = 370,
                eCustomParam = 380,
                eStickyFaults = 390,
                eAnalogPosition = 400,
                eQuadraturePosition = 401,
                ePulseWidthPosition = 402,
                eMotMag_Accel = 410,
                eMotMag_VelCruise = 411,
                eLimitSwitchSource = 421,
                eLimitSwitchNormClosedAndDis = 422,
                eLimitSwitchDisableNeutralOnLOS = 423,
                eLimitSwitchRemoteDevID = 424,
                eSoftLimitDisableNeutralOnLOS = 425,
                ePulseWidthPeriod_EdgesPerRot = 430,
                ePulseWidthPeriod_FilterWindowSz = 431,
                eYawOffset = 160,
                eCompassOffset = 161,
                eBetaGain = 162,
                eEnableCompassFusion = 163,
                eGyroNoMotionCal = 164,
                eEnterCalibration = 165,
                eFusedHeadingOffset = 166,
                eStatusFrameRate = 169,
                eAccumZ = 170,
                eTempCompDisable = 171,
                eMotionMeas_tap_threshX = 172,
                eMotionMeas_tap_threshY = 173,
                eMotionMeas_tap_threshZ = 174,
                eMotionMeas_tap_count = 175,
                eMotionMeas_tap_time = 176,
                eMotionMeas_tap_time_multi = 177,
                eMotionMeas_shake_reject_thresh = 178,
                eMotionMeas_shake_reject_time = 179,
                eMotionMeas_shake_reject_timeout = 180,
                eDefaultConfig = 500,
            }
            pub mod motorcontrol {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                #[repr(i32)]
                /// Choose the control mode for a motor controller
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum ControlMode {
                    /// Percent output [-1,1]
                    PercentOutput = 0,
                    /// Position closed loop
                    Position = 1,
                    /// Velocity closed loop
                    Velocity = 2,
                    /// Input current closed loop
                    Current = 3,
                    /// Follow other motor controller
                    Follower = 5,
                    /// Motion Profile
                    MotionProfile = 6,
                    /// Motion Magic
                    MotionMagic = 7,
                    /// Motion Profile with auxiliary output
                    MotionProfileArc = 10,
                    /// Disable Motor Controller
                    Disabled = 15,
                }
                #[repr(u32)]
                /// Control Frames for motor controllers
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum ControlFrame {
                    /// Control
                    Control_3_General = 262272,
                    /// Advanced Control
                    Control_4_Advanced = 262336,
                    /// Trajectory points
                    Control_6_MotProfAddTrajPoint = 262464,
                }
                #[repr(u32)]
                /// Control Frames for enhanced motor controllers
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum ControlFrameEnhanced {
                    /// Control
                    Control_3_General_ = 262272,
                    /// Advanced Control
                    Control_4_Advanced_ = 262336,
                    /// Override feedback output
                    Control_5_FeedbackOutputOverride_ = 262400,
                    /// Trajectory points
                    Control_6_MotProfAddTrajPoint_ = 262464,
                }
                #[repr(u32)]
                /// How to interpret a demand value.
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum DemandType {
                    /// Ignore the demand value and apply neutral/no-change.
                    Neutral = 0,
                    ///!< Target value of Aux PID loop 1.
                    AuxPID = 1,
                    ///!< Simply add to the output
                    ArbitraryFeedForward = 2,
                }
                impl root::ctre::phoenix::motorcontrol::FeedbackDevice {
                    pub const CTRE_MagEncoder_Absolute:
                        root::ctre::phoenix::motorcontrol::FeedbackDevice =
                        FeedbackDevice::PulseWidthEncodedPosition;
                }
                impl root::ctre::phoenix::motorcontrol::FeedbackDevice {
                    pub const CTRE_MagEncoder_Relative:
                        root::ctre::phoenix::motorcontrol::FeedbackDevice =
                        FeedbackDevice::QuadEncoder;
                }
                #[repr(u32)]
                /// Choose the feedback device for a motor controller
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum FeedbackDevice {
                    /// Quadrature encoder
                    QuadEncoder = 0,
                    /// Analog potentiometer/encoder
                    Analog = 2,
                    /// Tachometer
                    Tachometer = 4,
                    /// CTRE Mag Encoder in Relative mode or
                    /// any other device that uses PWM to encode its output
                    PulseWidthEncodedPosition = 8,
                    /// Sum0 + Sum1
                    SensorSum = 9,
                    /// Diff0 - Diff1
                    SensorDifference = 10,
                    /// Sensor configured in RemoteFilter0
                    RemoteSensor0 = 11,
                    /// Sensor configured in RemoteFilter1
                    RemoteSensor1 = 12,
                    /// Motor Controller will fake a sensor based on applied motor output.
                    SoftwareEmulatedSensor = 15,
                }
                #[repr(u32)]
                /// Choose the remote feedback device for a motor controller
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum RemoteFeedbackDevice {
                    /// Factory default setting for non-enhanced motor controllers
                    FactoryDefaultOff = 0,
                    /// Use Sum0 + Sum1
                    SensorSum = 9,
                    /// Use Diff0 - Diff1
                    SensorDifference = 10,
                    /// Use the sensor configured
                    /// in filter0
                    RemoteSensor0 = 11,
                    /// Use the sensor configured
                    /// in filter1
                    RemoteSensor1 = 12,
                    /// Motor Controller will fake a sensor based on applied motor output.
                    SoftwareEmulatedSensor = 15,
                }
                #[repr(u32)]
                /// Choose the type of follower
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum FollowerType {
                    /// Follow the percentOutput the master is using
                    PercentOutput = 0,
                    /// Follow the auxiliary output the master is
                    /// calculating. Used for 2-axis control.
                    /// This typically means apply PID0 - PID1 from master.
                    AuxOutput1 = 1,
                }
                #[repr(u32)]
                /// Limit switch source enum
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum LimitSwitchSource {
                    /// Limit switch directly connected to motor controller
                    FeedbackConnector = 0,
                    /// Use Limit switch connected to TalonSRX on CAN
                    RemoteTalonSRX = 1,
                    /// User Limit switch connected to CANifier
                    RemoteCANifier = 2,
                    /// Don't use a limit switch
                    Deactivated = 3,
                }
                #[repr(u32)]
                /// Remote Limit switch source enum
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum RemoteLimitSwitchSource {
                    /// Don't use limit switch, this is the factory default value
                    FactoryDefaultOff = 0,
                    /// Use Limit switch connected to TalonSRX on CAN
                    RemoteTalonSRX = 1,
                    /// User Limit switch connected to CANifier
                    RemoteCANifier = 2,
                    /// Don't use a limit switch
                    Deactivated = 3,
                }
                #[repr(u32)]
                /// Choose whether the limit switch is normally
                /// open or normally closed
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum LimitSwitchNormal {
                    /// Limit Switch is tripped when
                    /// the circuit is closed
                    NormallyOpen = 0,
                    /// Limit Switch is tripped when
                    /// the circuit is open
                    NormallyClosed = 1,
                    /// Limit switch is disabled
                    Disabled = 2,
                }
                #[repr(u32)]
                /// Choose the neutral mode for a motor controller
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum NeutralMode {
                    /// Use the NeutralMode that is set in the MC's persistent storage.
                    EEPROMSetting = 0,
                    /// When commanded to neutral, motor leads are set to high-impedance, allowing mechanism to coast.
                    Coast = 1,
                    /// When commanded to neutral, motor leads are commonized electrically to reduce motion.
                    Brake = 2,
                }
                #[repr(i32)]
                /// Choose the remote sensor source for a motor controller
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum RemoteSensorSource {
                    /// Don't use a sensor
                    Off = 0,
                    /// Use a sensor connected to
                    /// a TalonSRX and configured on
                    /// the TalonSRX
                    TalonSRX_SelectedSensor = 1,
                    /// Use a CAN Pigeon's Yaw value
                    Pigeon_Yaw = 2,
                    /// Use a CAN Pigeon's Pitch value
                    Pigeon_Pitch = 3,
                    /// Use a CAN Pigeon's Roll value
                    Pigeon_Roll = 4,
                    /// Use a quadrature sensor
                    /// connected to a CANifier
                    CANifier_Quadrature = 5,
                    /// Use a PWM sensor connected
                    /// to CANifier's PWM0
                    CANifier_PWMInput0 = 6,
                    /// Use a PWM sensor connected
                    /// to CANifier's PWM1
                    CANifier_PWMInput1 = 7,
                    /// Use a PWM sensor connected
                    /// to CANifier's PWM2
                    CANifier_PWMInput2 = 8,
                    /// Use a PWM sensor connected
                    /// to CANifier's PWM3
                    CANifier_PWMInput3 = 9,
                    /// Use the yaw value of a pigeon
                    /// connected to a talon over ribbon cable
                    GadgeteerPigeon_Yaw = 10,
                    /// Use the pitch value of a pigeon
                    /// connected to a talon over ribbon cable
                    GadgeteerPigeon_Pitch = 11,
                    /// Use the roll value of a pigeon
                    /// connected to a talon over ribbon cable
                    GadgeteerPigeon_Roll = 12,
                }
                #[repr(i32)]
                /// Choose the sensor term for a motor controller
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum SensorTerm {
                    /// Choose Sum0 for a term
                    Sum0 = 0,
                    /// Choose Sum1 for a term
                    Sum1 = 1,
                    /// Choose Diff0 for a term
                    Diff0 = 2,
                    /// Choose Diff1 for a term
                    Diff1 = 3,
                }
                impl root::ctre::phoenix::motorcontrol::StatusFrameEnhanced {
                    pub const Status_10_Targets:
                        root::ctre::phoenix::motorcontrol::StatusFrameEnhanced =
                        StatusFrameEnhanced::Status_10_MotionMagic;
                }
                #[repr(u32)]
                /// The different status frames available to enhanced motor controllers
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum StatusFrameEnhanced {
                    /// General Status
                    Status_1_General = 5120,
                    /// Feedback for selected sensor on primary PID[0].
                    Status_2_Feedback0 = 5184,
                    /// Analog sensor, motor controller
                    /// temperature, and voltage at input leads
                    Status_4_AinTempVbat = 5312,
                    /// Miscellaneous signals
                    Status_6_Misc = 5440,
                    /// Communication status
                    Status_7_CommStatus = 5504,
                    /// Motion profile buffer status
                    Status_9_MotProfBuffer = 5632,
                    /// Old name for Status 10.
                    /// Use @see #Status_10_Targets instead.
                    Status_10_MotionMagic = 5696,
                    /// Feedback for selected sensor on aux PID[1].
                    Status_12_Feedback1 = 5824,
                    /// Primary PID
                    Status_13_Base_PIDF0 = 5888,
                    /// Auxiliary PID
                    Status_14_Turn_PIDF1 = 5952,
                    /// Firmware & API status information
                    Status_15_FirmareApiStatus = 6016,
                    /// MotionProfile Targets for Auxiliary PID1.
                    Status_17_Targets1 = 7168,
                    /// Quadrature sensor
                    Status_3_Quadrature = 5248,
                    /// Pulse width sensor
                    Status_8_PulseWidth = 5568,
                    /// Gadgeteer status
                    Status_11_UartGadgeteer = 5760,
                }
                impl root::ctre::phoenix::motorcontrol::StatusFrame {
                    pub const Status_10_Targets_: root::ctre::phoenix::motorcontrol::StatusFrame =
                        StatusFrame::Status_10_MotionMagic_;
                }
                #[repr(u32)]
                /// The different status frames available to motor controllers
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum StatusFrame {
                    /// General Status
                    Status_1_General_ = 5120,
                    /// Main controller feedback
                    Status_2_Feedback0_ = 5184,
                    /// Analog sensor, motor controller
                    /// temperature, and voltage at input leads
                    Status_4_AinTempVbat_ = 5312,
                    /// Miscellaneous signals
                    Status_6_Misc_ = 5440,
                    /// Communication status to controller
                    Status_7_CommStatus_ = 5504,
                    /// Motion profile buffer status
                    Status_9_MotProfBuffer_ = 5632,
                    /// Old name for Status 10.
                    /// Use @see #Status_10_Targets instead.
                    Status_10_MotionMagic_ = 5696,
                    /// Secondary controller feedback
                    Status_12_Feedback1_ = 5824,
                    /// Base PID
                    Status_13_Base_PIDF0_ = 5888,
                    /// Auxiliary PID
                    Status_14_Turn_PIDF1_ = 5952,
                    /// Firmware & API status information
                    Status_15_FirmareApiStatus_ = 6016,
                    /// MotionProfile Targets for Auxiliary PID1.
                    Status_17_Targets1_ = 7168,
                }
                #[repr(u32)]
                /// Velocity Measurement Periods
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum VelocityMeasPeriod {
                    /// 1ms measurement period
                    Period_1Ms = 1,
                    /// 2ms measurement period
                    Period_2Ms = 2,
                    /// 5ms measurement period
                    Period_5Ms = 5,
                    /// 10ms measurement period
                    Period_10Ms = 10,
                    /// 20ms measurement period
                    Period_20Ms = 20,
                    /// 25ms measurement period
                    Period_25Ms = 25,
                    /// 50ms measurement period
                    Period_50Ms = 50,
                    /// 100ms measurement period
                    Period_100Ms = 100,
                }
            }
            pub mod motion {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                #[repr(u32)]
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum SetValueMotionProfile {
                    Disable = 0,
                    Enable = 1,
                    Hold = 2,
                }
                /// Motion Profile Trajectory Point
                /// This is simply a data transfer object.
                #[repr(C)]
                #[derive(Debug, Default, Copy, Clone)]
                pub struct TrajectoryPoint {
                    /// The position to servo to (in sensor units).
                    pub position: f64,
                    /// The velocity to feed-forward (in sensor-units per 100ms).
                    pub velocity: f64,
                    /// Added to the output of PID[0], should be within [-1,+1] where 0.01 = 1%.
                    pub arbFeedFwd: f64,
                    /// Not used.  Use auxiliaryPos instead.  @see auxiliaryPos
                    pub headingDeg: f64,
                    /// The position for auxiliary PID[1] to target (in sensor units).
                    pub auxiliaryPos: f64,
                    /// The velocity for auxiliary PID[1] to target. (in sensor-units per 100ms).
                    pub auxiliaryVel: f64,
                    /// Added to the output of PID[1], should be within [-1,+1] where 0.01 = 1%.
                    pub auxiliaryArbFeedFwd: f64,
                    /// Which slot to get PIDF gains.
                    /// PID is used for position servo.
                    /// F is used as the Kv constant for velocity feed-forward.
                    /// Typically this is hard-coded
                    /// to a particular slot, but you are free to gain schedule if need be.
                    /// gain schedule if need be.
                    /// Choose from [0,3].
                    pub profileSlotSelect0: u32,
                    /// Which slot to get PIDF gains for auxiliary PID.
                    /// This only has impact during MotionProfileArc Control mode.
                    /// Choose from [0,3].
                    pub profileSlotSelect1: u32,
                    /// Set to true to signal Talon that this is the final point, so do not
                    /// attempt to pop another trajectory point from out of the Talon buffer.
                    /// Instead continue processing this way point.  Typically the velocity
                    /// member variable should be zero so that the motor doesn't spin indefinitely.
                    pub isLastPoint: bool,
                    /// Set to true to signal Talon to zero the selected sensor.
                    /// When generating MPs, one simple method is to make the first target position zero,
                    /// and the final target position the target distance from the current position.
                    /// Then when you fire the MP, the current position gets set to zero.
                    /// If this is the intent, you can set zeroPos on the first trajectory point.
                    ///
                    /// Otherwise you can leave this false for all points, and offset the positions
                    /// of all trajectory points so they are correct.
                    ///
                    /// If using multiple sensor sources (Arc modes) we recommend you manually set sensor positions
                    /// before arming MP.
                    pub zeroPos: bool,
                    /// Duration (ms) to apply this trajectory pt.
                    /// This time unit is ADDED to the existing base time set by
                    /// ConfigMotionProfileTrajectoryPeriod().
                    pub timeDur: ::std::os::raw::c_int,
                    /// If using MotionProfileArc, this flag must be true on all points.
                    /// If using MotionProfile, this flag must be false on all points.
                    pub useAuxPID: bool,
                }
                #[test]
                fn bindgen_test_layout_TrajectoryPoint() {
                    assert_eq!(
                        ::std::mem::size_of::<TrajectoryPoint>(),
                        80usize,
                        concat!("Size of: ", stringify!(TrajectoryPoint))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<TrajectoryPoint>(),
                        8usize,
                        concat!("Alignment of ", stringify!(TrajectoryPoint))
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).position as *const _
                                as usize
                        },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(position)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).velocity as *const _
                                as usize
                        },
                        8usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(velocity)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).arbFeedFwd as *const _
                                as usize
                        },
                        16usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(arbFeedFwd)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).headingDeg as *const _
                                as usize
                        },
                        24usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(headingDeg)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).auxiliaryPos as *const _
                                as usize
                        },
                        32usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(auxiliaryPos)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).auxiliaryVel as *const _
                                as usize
                        },
                        40usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(auxiliaryVel)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).auxiliaryArbFeedFwd
                                as *const _ as usize
                        },
                        48usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(auxiliaryArbFeedFwd)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).profileSlotSelect0
                                as *const _ as usize
                        },
                        56usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(profileSlotSelect0)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).profileSlotSelect1
                                as *const _ as usize
                        },
                        60usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(profileSlotSelect1)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).isLastPoint as *const _
                                as usize
                        },
                        64usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(isLastPoint)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).zeroPos as *const _ as usize
                        },
                        65usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(zeroPos)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).timeDur as *const _ as usize
                        },
                        68usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(timeDur)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<TrajectoryPoint>())).useAuxPID as *const _
                                as usize
                        },
                        72usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(TrajectoryPoint),
                            "::",
                            stringify!(useAuxPID)
                        )
                    );
                }
                /// Motion Profile Status
                /// This is simply a data transer object.
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct MotionProfileStatus {
                    /// The available empty slots in the trajectory buffer.
                    ///
                    /// The robot API holds a "top buffer" of trajectory points, so your applicaion
                    /// can dump several points at once.  The API will then stream them into the Talon's
                    /// low-level buffer, allowing the Talon to act on them.
                    pub topBufferRem: usize,
                    /// The number of points in the top trajectory buffer.
                    pub topBufferCnt: usize,
                    /// The number of points in the low level Talon/Victor buffer.
                    pub btmBufferCnt: ::std::os::raw::c_int,
                    /// Set if isUnderrun ever gets set.
                    /// Can be manually cleared by ClearMotionProfileHasUnderrun() or automatically cleared by StartMotionProfile().
                    /// @see clearMotionProfileHasUnderrun()
                    pub hasUnderrun: bool,
                    /// This is set if Talon/Victor needs to shift a point from its buffer into
                    /// the active trajectory point however the buffer is empty. This gets cleared
                    /// automatically when is resolved.
                    pub isUnderrun: bool,
                    /// True if the active trajectory point is not empty, false otherwise.
                    /// The members in activePoint are only valid if this signal is set.
                    pub activePointValid: bool,
                    /// True if the active trajectory point is the last point of the profile
                    pub isLast: bool,
                    /// The selected PID[0] profile slot of current profile
                    pub profileSlotSelect0: ::std::os::raw::c_int,
                    /// The selected auxiliary PID[1] profile slot of current profile
                    pub profileSlotSelect1: ::std::os::raw::c_int,
                    /// The current output mode of the motion profile executer (disabled, enabled, or hold).
                    /// When changing the set() value in MP mode, it's important to check this signal to
                    /// confirm the change takes effect before interacting with the top buffer.
                    pub outputEnable: root::ctre::phoenix::motion::SetValueMotionProfile,
                    /// The applied duration of the active trajectory point
                    pub timeDurMs: ::std::os::raw::c_int,
                }
                #[test]
                fn bindgen_test_layout_MotionProfileStatus() {
                    assert_eq!(
                        ::std::mem::size_of::<MotionProfileStatus>(),
                        40usize,
                        concat!("Size of: ", stringify!(MotionProfileStatus))
                    );
                    assert_eq!(
                        ::std::mem::align_of::<MotionProfileStatus>(),
                        8usize,
                        concat!("Alignment of ", stringify!(MotionProfileStatus))
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<MotionProfileStatus>())).topBufferRem as *const _
                                as usize
                        },
                        0usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(MotionProfileStatus),
                            "::",
                            stringify!(topBufferRem)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<MotionProfileStatus>())).topBufferCnt as *const _
                                as usize
                        },
                        8usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(MotionProfileStatus),
                            "::",
                            stringify!(topBufferCnt)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<MotionProfileStatus>())).btmBufferCnt as *const _
                                as usize
                        },
                        16usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(MotionProfileStatus),
                            "::",
                            stringify!(btmBufferCnt)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<MotionProfileStatus>())).hasUnderrun as *const _
                                as usize
                        },
                        20usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(MotionProfileStatus),
                            "::",
                            stringify!(hasUnderrun)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<MotionProfileStatus>())).isUnderrun as *const _
                                as usize
                        },
                        21usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(MotionProfileStatus),
                            "::",
                            stringify!(isUnderrun)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<MotionProfileStatus>())).activePointValid
                                as *const _ as usize
                        },
                        22usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(MotionProfileStatus),
                            "::",
                            stringify!(activePointValid)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<MotionProfileStatus>())).isLast as *const _
                                as usize
                        },
                        23usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(MotionProfileStatus),
                            "::",
                            stringify!(isLast)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<MotionProfileStatus>())).profileSlotSelect0
                                as *const _ as usize
                        },
                        24usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(MotionProfileStatus),
                            "::",
                            stringify!(profileSlotSelect0)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<MotionProfileStatus>())).profileSlotSelect1
                                as *const _ as usize
                        },
                        28usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(MotionProfileStatus),
                            "::",
                            stringify!(profileSlotSelect1)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<MotionProfileStatus>())).outputEnable as *const _
                                as usize
                        },
                        32usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(MotionProfileStatus),
                            "::",
                            stringify!(outputEnable)
                        )
                    );
                    assert_eq!(
                        unsafe {
                            &(*(::std::ptr::null::<MotionProfileStatus>())).timeDurMs as *const _
                                as usize
                        },
                        36usize,
                        concat!(
                            "Offset of field: ",
                            stringify!(MotionProfileStatus),
                            "::",
                            stringify!(timeDurMs)
                        )
                    );
                }
                impl Default for MotionProfileStatus {
                    fn default() -> Self {
                        unsafe { ::std::mem::zeroed() }
                    }
                }
            }
            #[repr(u32)]
            /// Enumerated type for status frame types.
            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
            pub enum CANifierControlFrame {
                CANifier_Control_1_General = 50593792,
                CANifier_Control_2_PwmOutput = 50593856,
            }
            #[repr(u32)]
            /// Enumerated type for status frame types.
            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
            pub enum CANifierStatusFrame {
                Status_1_General = 267264,
                Status_2_General = 267328,
                Status_3_PwmInputs0 = 267392,
                Status_4_PwmInputs1 = 267456,
                Status_5_PwmInputs2 = 267520,
                Status_6_PwmInputs3 = 267584,
                Status_8_Misc = 267712,
            }
            #[repr(u32)]
            /// Enum for velocity periods used for CANifier
            #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
            pub enum CANifierVelocityMeasPeriod {
                /// 1ms velocity measurement period
                Period_1Ms = 1,
                /// 2ms velocity measurement period
                Period_2Ms = 2,
                /// 5ms velocity measurement period
                Period_5Ms = 5,
                /// 10ms velocity measurement period
                Period_10Ms = 10,
                /// 20ms velocity measurement period
                Period_20Ms = 20,
                /// 25ms velocity measurement period
                Period_25Ms = 25,
                /// 50ms velocity measurement period
                Period_50Ms = 50,
                /// 100ms velocity measurement period
                Period_100Ms = 100,
            }
            pub mod sensors {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                #[repr(u32)]
                /// Enumerated type for status frame types.
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum PigeonIMU_ControlFrame {
                    PigeonIMU_CondStatus_Control_1 = 272384,
                }
                impl root::ctre::phoenix::sensors::PigeonIMU_StatusFrame {
                    pub const PigeonIMU_BiasedStatus_4_Mag:
                        root::ctre::phoenix::sensors::PigeonIMU_StatusFrame =
                        PigeonIMU_StatusFrame::PigeonIMU_RawStatus_4_Mag;
                }
                #[repr(u32)]
                /// Enumerated type for status frame types.
                #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
                pub enum PigeonIMU_StatusFrame {
                    PigeonIMU_CondStatus_1_General = 270336,
                    PigeonIMU_CondStatus_9_SixDeg_YPR = 270848,
                    PigeonIMU_CondStatus_6_SensorFusion = 270656,
                    PigeonIMU_CondStatus_11_GyroAccum = 270976,
                    PigeonIMU_CondStatus_2_GeneralCompass = 270400,
                    PigeonIMU_CondStatus_3_GeneralAccel = 270464,
                    PigeonIMU_CondStatus_10_SixDeg_Quat = 270912,
                    PigeonIMU_RawStatus_4_Mag = 269504,
                    PigeonIMU_BiasedStatus_2_Gyro = 269376,
                    PigeonIMU_BiasedStatus_6_Accel = 269632,
                }
            }
        }
    }
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    extern "C" {
        pub fn c_MotController_Create1(
            baseArbId: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn c_MotController_DestroyAll();
    }
    extern "C" {
        pub fn c_MotController_Destroy(
            handle: *mut ::std::os::raw::c_void,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetDeviceNumber(
            handle: *mut ::std::os::raw::c_void,
            deviceNumber: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetDescription(
            handle: *mut ::std::os::raw::c_void,
            toFill: *mut ::std::os::raw::c_char,
            toFillByteSz: ::std::os::raw::c_int,
            numBytesFilled: *mut usize,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SetDemand(
            handle: *mut ::std::os::raw::c_void,
            mode: ::std::os::raw::c_int,
            demand0: ::std::os::raw::c_int,
            demand1: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_Set_4(
            handle: *mut ::std::os::raw::c_void,
            mode: ::std::os::raw::c_int,
            demand0: f64,
            demand1: f64,
            demand1Type: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SetNeutralMode(
            handle: *mut ::std::os::raw::c_void,
            neutralMode: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        pub fn c_MotController_SetSensorPhase(
            handle: *mut ::std::os::raw::c_void,
            PhaseSensor: bool,
        );
    }
    extern "C" {
        pub fn c_MotController_SetInverted(handle: *mut ::std::os::raw::c_void, invert: bool);
    }
    extern "C" {
        pub fn c_MotController_SetInverted_2(
            handle: *mut ::std::os::raw::c_void,
            invertType: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        pub fn c_MotController_ConfigFactoryDefault(
            handle: *mut ::std::os::raw::c_void,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigOpenLoopRamp(
            handle: *mut ::std::os::raw::c_void,
            secondsFromNeutralToFull: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigClosedLoopRamp(
            handle: *mut ::std::os::raw::c_void,
            secondsFromNeutralToFull: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigPeakOutputForward(
            handle: *mut ::std::os::raw::c_void,
            percentOut: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigPeakOutputReverse(
            handle: *mut ::std::os::raw::c_void,
            percentOut: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigNominalOutputForward(
            handle: *mut ::std::os::raw::c_void,
            percentOut: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigNominalOutputReverse(
            handle: *mut ::std::os::raw::c_void,
            percentOut: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigNeutralDeadband(
            handle: *mut ::std::os::raw::c_void,
            percentDeadband: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigVoltageCompSaturation(
            handle: *mut ::std::os::raw::c_void,
            voltage: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigVoltageMeasurementFilter(
            handle: *mut ::std::os::raw::c_void,
            filterWindowSamples: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_EnableVoltageCompensation(
            handle: *mut ::std::os::raw::c_void,
            enable: bool,
        );
    }
    extern "C" {
        pub fn c_MotController_GetInverted(
            handle: *mut ::std::os::raw::c_void,
            invert: *mut bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetBusVoltage(
            handle: *mut ::std::os::raw::c_void,
            voltage: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetMotorOutputPercent(
            handle: *mut ::std::os::raw::c_void,
            percentOutput: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetOutputCurrent(
            handle: *mut ::std::os::raw::c_void,
            current: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetTemperature(
            handle: *mut ::std::os::raw::c_void,
            temperature: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigSelectedFeedbackSensor(
            handle: *mut ::std::os::raw::c_void,
            feedbackDevice: ::std::os::raw::c_int,
            pidIdx: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigSelectedFeedbackCoefficient(
            handle: *mut ::std::os::raw::c_void,
            coefficient: f64,
            pidIdx: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigRemoteFeedbackFilter(
            handle: *mut ::std::os::raw::c_void,
            deviceID: ::std::os::raw::c_int,
            remoteSensorSource: ::std::os::raw::c_int,
            remoteOrdinal: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigSensorTerm(
            handle: *mut ::std::os::raw::c_void,
            sensorTerm: ::std::os::raw::c_int,
            feedbackDevice: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetSelectedSensorPosition(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
            pidIdx: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetSelectedSensorVelocity(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
            pidIdx: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SetSelectedSensorPosition(
            handle: *mut ::std::os::raw::c_void,
            sensorPos: ::std::os::raw::c_int,
            pidIdx: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SetControlFramePeriod(
            handle: *mut ::std::os::raw::c_void,
            frame: ::std::os::raw::c_int,
            periodMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SetStatusFramePeriod(
            handle: *mut ::std::os::raw::c_void,
            frame: ::std::os::raw::c_int,
            periodMs: u8,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetStatusFramePeriod(
            handle: *mut ::std::os::raw::c_void,
            frame: ::std::os::raw::c_int,
            periodMs: *mut ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigVelocityMeasurementPeriod(
            handle: *mut ::std::os::raw::c_void,
            period: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigVelocityMeasurementWindow(
            handle: *mut ::std::os::raw::c_void,
            windowSize: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigForwardLimitSwitchSource(
            handle: *mut ::std::os::raw::c_void,
            type_: ::std::os::raw::c_int,
            normalOpenOrClose: ::std::os::raw::c_int,
            deviceID: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigReverseLimitSwitchSource(
            handle: *mut ::std::os::raw::c_void,
            type_: ::std::os::raw::c_int,
            normalOpenOrClose: ::std::os::raw::c_int,
            deviceID: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_OverrideLimitSwitchesEnable(
            handle: *mut ::std::os::raw::c_void,
            enable: bool,
        );
    }
    extern "C" {
        pub fn c_MotController_ConfigForwardSoftLimitThreshold(
            handle: *mut ::std::os::raw::c_void,
            forwardSensorLimit: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigReverseSoftLimitThreshold(
            handle: *mut ::std::os::raw::c_void,
            reverseSensorLimit: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigForwardSoftLimitEnable(
            handle: *mut ::std::os::raw::c_void,
            enable: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigReverseSoftLimitEnable(
            handle: *mut ::std::os::raw::c_void,
            enable: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_OverrideSoftLimitsEnable(
            handle: *mut ::std::os::raw::c_void,
            enable: bool,
        );
    }
    extern "C" {
        pub fn c_MotController_Config_kP(
            handle: *mut ::std::os::raw::c_void,
            slotIdx: ::std::os::raw::c_int,
            value: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_Config_kI(
            handle: *mut ::std::os::raw::c_void,
            slotIdx: ::std::os::raw::c_int,
            value: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_Config_kD(
            handle: *mut ::std::os::raw::c_void,
            slotIdx: ::std::os::raw::c_int,
            value: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_Config_kF(
            handle: *mut ::std::os::raw::c_void,
            slotIdx: ::std::os::raw::c_int,
            value: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_Config_IntegralZone(
            handle: *mut ::std::os::raw::c_void,
            slotIdx: ::std::os::raw::c_int,
            izone: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigAllowableClosedloopError(
            handle: *mut ::std::os::raw::c_void,
            slotIdx: ::std::os::raw::c_int,
            allowableClosedLoopError: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigMaxIntegralAccumulator(
            handle: *mut ::std::os::raw::c_void,
            slotIdx: ::std::os::raw::c_int,
            iaccum: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigClosedLoopPeakOutput(
            handle: *mut ::std::os::raw::c_void,
            slotIdx: ::std::os::raw::c_int,
            percentOut: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigClosedLoopPeriod(
            handle: *mut ::std::os::raw::c_void,
            slotIdx: ::std::os::raw::c_int,
            loopTimeMs: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SetIntegralAccumulator(
            handle: *mut ::std::os::raw::c_void,
            iaccum: f64,
            pidIdx: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetClosedLoopError(
            handle: *mut ::std::os::raw::c_void,
            closedLoopError: *mut ::std::os::raw::c_int,
            pidIdx: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetIntegralAccumulator(
            handle: *mut ::std::os::raw::c_void,
            iaccum: *mut f64,
            pidIdx: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetErrorDerivative(
            handle: *mut ::std::os::raw::c_void,
            derror: *mut f64,
            pidIdx: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SelectProfileSlot(
            handle: *mut ::std::os::raw::c_void,
            slotIdx: ::std::os::raw::c_int,
            pidIdx: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetActiveTrajectoryPosition(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetActiveTrajectoryVelocity(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetActiveTrajectoryHeading(
            handle: *mut ::std::os::raw::c_void,
            param: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetActiveTrajectoryPosition_3(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
            pidIdx: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetActiveTrajectoryVelocity_3(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
            pidIdx: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetActiveTrajectoryArbFeedFwd_3(
            handle: *mut ::std::os::raw::c_void,
            param: *mut f64,
            pidIdx: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetActiveTrajectoryAll(
            handle: *mut ::std::os::raw::c_void,
            vel: *mut ::std::os::raw::c_int,
            pos: *mut ::std::os::raw::c_int,
            heading: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetActiveTrajectoryAll_5(
            handle: *mut ::std::os::raw::c_void,
            vel: *mut ::std::os::raw::c_int,
            pos: *mut ::std::os::raw::c_int,
            arbFeedFwd: *mut f64,
            pidIdx: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigMotionCruiseVelocity(
            handle: *mut ::std::os::raw::c_void,
            sensorUnitsPer100ms: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigMotionAcceleration(
            handle: *mut ::std::os::raw::c_void,
            sensorUnitsPer100msPerSec: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ClearMotionProfileTrajectories(
            handle: *mut ::std::os::raw::c_void,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetMotionProfileTopLevelBufferCount(
            handle: *mut ::std::os::raw::c_void,
            value: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_PushMotionProfileTrajectory(
            handle: *mut ::std::os::raw::c_void,
            position: f64,
            velocity: f64,
            headingDeg: f64,
            profileSlotSelect: ::std::os::raw::c_int,
            isLastPoint: bool,
            zeroPos: bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_PushMotionProfileTrajectory_2(
            handle: *mut ::std::os::raw::c_void,
            position: f64,
            velocity: f64,
            headingDeg: f64,
            profileSlotSelect0: ::std::os::raw::c_int,
            profileSlotSelect1: ::std::os::raw::c_int,
            isLastPoint: bool,
            zeroPos: bool,
            durationMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_PushMotionProfileTrajectory_3(
            handle: *mut ::std::os::raw::c_void,
            position: f64,
            velocity: f64,
            arbFeedFwd: f64,
            auxiliaryPos: f64,
            auxiliaryVel: f64,
            auxiliaryArbFeedFwd: f64,
            profileSlotSelect0: u32,
            profileSlotSelect1: u32,
            isLastPoint: bool,
            zeroPos0: bool,
            timeDur: u32,
            useAuxPID: bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_StartMotionProfile(
            handle: *mut ::std::os::raw::c_void,
            streamHandle: *mut ::std::os::raw::c_void,
            minBufferedPts: u32,
            controlMode: root::ctre::phoenix::motorcontrol::ControlMode,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_IsMotionProfileFinished(
            handle: *mut ::std::os::raw::c_void,
            value: *mut bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_IsMotionProfileTopLevelBufferFull(
            handle: *mut ::std::os::raw::c_void,
            value: *mut bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ProcessMotionProfileBuffer(
            handle: *mut ::std::os::raw::c_void,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetMotionProfileStatus(
            handle: *mut ::std::os::raw::c_void,
            topBufferRem: *mut usize,
            topBufferCnt: *mut usize,
            btmBufferCnt: *mut ::std::os::raw::c_int,
            hasUnderrun: *mut bool,
            isUnderrun: *mut bool,
            activePointValid: *mut bool,
            isLast: *mut bool,
            profileSlotSelect: *mut ::std::os::raw::c_int,
            outputEnable: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetMotionProfileStatus_2(
            handle: *mut ::std::os::raw::c_void,
            topBufferRem: *mut usize,
            topBufferCnt: *mut usize,
            btmBufferCnt: *mut ::std::os::raw::c_int,
            hasUnderrun: *mut bool,
            isUnderrun: *mut bool,
            activePointValid: *mut bool,
            isLast: *mut bool,
            profileSlotSelect: *mut ::std::os::raw::c_int,
            outputEnable: *mut ::std::os::raw::c_int,
            timeDurMs: *mut ::std::os::raw::c_int,
            profileSlotSelect1: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ClearMotionProfileHasUnderrun(
            handle: *mut ::std::os::raw::c_void,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ChangeMotionControlFramePeriod(
            handle: *mut ::std::os::raw::c_void,
            periodMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigMotionProfileTrajectoryPeriod(
            handle: *mut ::std::os::raw::c_void,
            durationMs: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigMotionProfileTrajectoryInterpolationEnable(
            handle: *mut ::std::os::raw::c_void,
            enable: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigFeedbackNotContinuous(
            handle: *mut ::std::os::raw::c_void,
            feedbackNotContinuous: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigRemoteSensorClosedLoopDisableNeutralOnLOS(
            handle: *mut ::std::os::raw::c_void,
            remoteSensorClosedLoopDisableNeutralOnLOS: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigClearPositionOnLimitF(
            handle: *mut ::std::os::raw::c_void,
            clearPositionOnLimitF: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigClearPositionOnLimitR(
            handle: *mut ::std::os::raw::c_void,
            clearPositionOnLimitR: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigClearPositionOnQuadIdx(
            handle: *mut ::std::os::raw::c_void,
            clearPositionOnQuadIdx: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigLimitSwitchDisableNeutralOnLOS(
            handle: *mut ::std::os::raw::c_void,
            limitSwitchDisableNeutralOnLOS: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigSoftLimitDisableNeutralOnLOS(
            handle: *mut ::std::os::raw::c_void,
            softLimitDisableNeutralOnLOS: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigPulseWidthPeriod_EdgesPerRot(
            handle: *mut ::std::os::raw::c_void,
            pulseWidthPeriod_EdgesPerRot: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigPulseWidthPeriod_FilterWindowSz(
            handle: *mut ::std::os::raw::c_void,
            pulseWidthPeriod_FilterWindowSz: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetLastError(
            handle: *mut ::std::os::raw::c_void,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetFirmwareVersion(
            handle: *mut ::std::os::raw::c_void,
            arg1: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_HasResetOccurred(
            handle: *mut ::std::os::raw::c_void,
            arg1: *mut bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigSetCustomParam(
            handle: *mut ::std::os::raw::c_void,
            newValue: ::std::os::raw::c_int,
            paramIndex: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigGetCustomParam(
            handle: *mut ::std::os::raw::c_void,
            readValue: *mut ::std::os::raw::c_int,
            paramIndex: ::std::os::raw::c_int,
            timoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigSetParameter(
            handle: *mut ::std::os::raw::c_void,
            param: ::std::os::raw::c_int,
            value: f64,
            subValue: u8,
            ordinal: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigGetParameter(
            handle: *mut ::std::os::raw::c_void,
            param: ::std::os::raw::c_int,
            value: *mut f64,
            ordinal: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigGetParameter_6(
            handle: *mut ::std::os::raw::c_void,
            param: i32,
            valueToSend: i32,
            valueRecieved: *mut i32,
            subValue: *mut u8,
            ordinal: i32,
            timeoutMs: i32,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigPeakCurrentLimit(
            handle: *mut ::std::os::raw::c_void,
            amps: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigPeakCurrentDuration(
            handle: *mut ::std::os::raw::c_void,
            milliseconds: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ConfigContinuousCurrentLimit(
            handle: *mut ::std::os::raw::c_void,
            amps: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_EnableCurrentLimit(
            handle: *mut ::std::os::raw::c_void,
            enable: bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SetLastError(
            handle: *mut ::std::os::raw::c_void,
            error: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetAnalogIn(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SetAnalogPosition(
            handle: *mut ::std::os::raw::c_void,
            newPosition: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetAnalogInRaw(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetAnalogInVel(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetQuadraturePosition(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SetQuadraturePosition(
            handle: *mut ::std::os::raw::c_void,
            newPosition: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetQuadratureVelocity(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetPulseWidthPosition(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SetPulseWidthPosition(
            handle: *mut ::std::os::raw::c_void,
            newPosition: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetPulseWidthVelocity(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetPulseWidthRiseToFallUs(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetPulseWidthRiseToRiseUs(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetPinStateQuadA(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetPinStateQuadB(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetPinStateQuadIdx(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_IsFwdLimitSwitchClosed(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_IsRevLimitSwitchClosed(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetFaults(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetStickyFaults(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_ClearStickyFaults(
            handle: *mut ::std::os::raw::c_void,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SelectDemandType(
            handle: *mut ::std::os::raw::c_void,
            enable: bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_SetMPEOutput(
            handle: *mut ::std::os::raw::c_void,
            MpeOutput: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_EnableHeadingHold(
            handle: *mut ::std::os::raw::c_void,
            enable: bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetAnalogInAll(
            handle: *mut ::std::os::raw::c_void,
            withOv: *mut ::std::os::raw::c_int,
            raw: *mut ::std::os::raw::c_int,
            vel: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetQuadratureSensor(
            handle: *mut ::std::os::raw::c_void,
            pos: *mut ::std::os::raw::c_int,
            vel: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetPulseWidthAll(
            handle: *mut ::std::os::raw::c_void,
            pos: *mut ::std::os::raw::c_int,
            vel: *mut ::std::os::raw::c_int,
            riseToRiseUs: *mut ::std::os::raw::c_int,
            riseToFallUs: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetQuadPinStates(
            handle: *mut ::std::os::raw::c_void,
            quadA: *mut ::std::os::raw::c_int,
            quadB: *mut ::std::os::raw::c_int,
            quadIdx: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetLimitSwitchState(
            handle: *mut ::std::os::raw::c_void,
            isFwdClosed: *mut ::std::os::raw::c_int,
            isRevClosed: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_MotController_GetClosedLoopTarget(
            handle: *mut ::std::os::raw::c_void,
            value: *mut ::std::os::raw::c_int,
            pidIdx: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    pub mod CANifier_CCI {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(u32)]
        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
        pub enum GeneralPin {
            QUAD_IDX = 0,
            QUAD_B = 1,
            QUAD_A = 2,
            LIMR = 3,
            LIMF = 4,
            SDA = 5,
            SCL = 6,
            SPI_CS = 7,
            SPI_MISO_PWM2P = 8,
            SPI_MOSI_PWM1P = 9,
            SPI_CLK_PWM0P = 10,
        }
    }
    extern "C" {
        pub fn c_CANifier_Create1(
            deviceNumber: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn c_CANifier_DestroyAll();
    }
    extern "C" {
        pub fn c_CANifier_Destroy(
            handle: *mut ::std::os::raw::c_void,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetDescription(
            handle: *mut ::std::os::raw::c_void,
            toFill: *mut ::std::os::raw::c_char,
            toFillByteSz: ::std::os::raw::c_int,
            numBytesFilled: *mut usize,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_SetLEDOutput(
            handle: *mut ::std::os::raw::c_void,
            dutyCycle: u32,
            ledChannel: u32,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_SetGeneralOutputs(
            handle: *mut ::std::os::raw::c_void,
            outputsBits: u32,
            isOutputBits: u32,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_SetGeneralOutput(
            handle: *mut ::std::os::raw::c_void,
            outputPin: u32,
            outputValue: bool,
            outputEnable: bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_SetPWMOutput(
            handle: *mut ::std::os::raw::c_void,
            pwmChannel: u32,
            dutyCycle: u32,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_EnablePWMOutput(
            handle: *mut ::std::os::raw::c_void,
            pwmChannel: u32,
            bEnable: bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetGeneralInputs(
            handle: *mut ::std::os::raw::c_void,
            allPins: *mut bool,
            capacity: u32,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetGeneralInput(
            handle: *mut ::std::os::raw::c_void,
            inputPin: u32,
            measuredInput: *mut bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetPWMInput(
            handle: *mut ::std::os::raw::c_void,
            pwmChannel: u32,
            dutyCycleAndPeriod: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetLastError(
            handle: *mut ::std::os::raw::c_void,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetBusVoltage(
            handle: *mut ::std::os::raw::c_void,
            batteryVoltage: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetQuadraturePosition(
            handle: *mut ::std::os::raw::c_void,
            pos: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_SetQuadraturePosition(
            handle: *mut ::std::os::raw::c_void,
            pos: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetQuadratureVelocity(
            handle: *mut ::std::os::raw::c_void,
            vel: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetQuadratureSensor(
            handle: *mut ::std::os::raw::c_void,
            pos: *mut ::std::os::raw::c_int,
            vel: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_ConfigVelocityMeasurementPeriod(
            handle: *mut ::std::os::raw::c_void,
            period: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_ConfigVelocityMeasurementWindow(
            handle: *mut ::std::os::raw::c_void,
            window: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_ConfigClearPositionOnLimitF(
            handle: *mut ::std::os::raw::c_void,
            clearPositionOnLimitF: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_ConfigClearPositionOnLimitR(
            handle: *mut ::std::os::raw::c_void,
            clearPositionOnLimitR: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_ConfigClearPositionOnQuadIdx(
            handle: *mut ::std::os::raw::c_void,
            clearPositionOnQuadIdx: bool,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_SetLastError(
            handle: *mut ::std::os::raw::c_void,
            error: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        pub fn c_CANifier_ConfigSetParameter(
            handle: *mut ::std::os::raw::c_void,
            param: ::std::os::raw::c_int,
            value: f64,
            subValue: u8,
            ordinal: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_ConfigGetParameter(
            handle: *mut ::std::os::raw::c_void,
            param: ::std::os::raw::c_int,
            value: *mut f64,
            ordinal: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_ConfigGetParameter_6(
            handle: *mut ::std::os::raw::c_void,
            param: i32,
            valueToSend: i32,
            valueRecieved: *mut i32,
            subValue: *mut u8,
            ordinal: i32,
            timeoutMs: i32,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_ConfigSetCustomParam(
            handle: *mut ::std::os::raw::c_void,
            newValue: ::std::os::raw::c_int,
            paramIndex: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_ConfigGetCustomParam(
            handle: *mut ::std::os::raw::c_void,
            readValue: *mut ::std::os::raw::c_int,
            paramIndex: ::std::os::raw::c_int,
            timoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_ConfigFactoryDefault(
            handle: *mut ::std::os::raw::c_void,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetFaults(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetStickyFaults(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_ClearStickyFaults(
            handle: *mut ::std::os::raw::c_void,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetFirmwareVersion(
            handle: *mut ::std::os::raw::c_void,
            firmwareVers: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_HasResetOccurred(
            handle: *mut ::std::os::raw::c_void,
            hasReset: *mut bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_SetStatusFramePeriod(
            handle: *mut ::std::os::raw::c_void,
            frame: ::std::os::raw::c_int,
            periodMs: u8,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_GetStatusFramePeriod(
            handle: *mut ::std::os::raw::c_void,
            frame: ::std::os::raw::c_int,
            periodMs: *mut ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_CANifier_SetControlFramePeriod(
            handle: *mut ::std::os::raw::c_void,
            frame: ::std::os::raw::c_int,
            periodMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_Create2(
            talonDeviceID: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn c_PigeonIMU_Create1(
            deviceNumber: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn c_PigeonIMU_Destroy(
            handle: *mut ::std::os::raw::c_void,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_DestroyAll();
    }
    extern "C" {
        pub fn c_PigeonIMU_GetDescription(
            handle: *mut ::std::os::raw::c_void,
            toFill: *mut ::std::os::raw::c_char,
            toFillByteSz: ::std::os::raw::c_int,
            numBytesFilled: *mut usize,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_ConfigSetParameter(
            handle: *mut ::std::os::raw::c_void,
            param: ::std::os::raw::c_int,
            value: f64,
            subValue: u8,
            ordinal: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_ConfigGetParameter(
            handle: *mut ::std::os::raw::c_void,
            param: ::std::os::raw::c_int,
            value: *mut f64,
            ordinal: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_ConfigGetParameter_6(
            handle: *mut ::std::os::raw::c_void,
            param: i32,
            valueToSend: i32,
            valueRecieved: *mut i32,
            subValue: *mut u8,
            ordinal: i32,
            timeoutMs: i32,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_ConfigSetCustomParam(
            handle: *mut ::std::os::raw::c_void,
            newValue: ::std::os::raw::c_int,
            paramIndex: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_ConfigGetCustomParam(
            handle: *mut ::std::os::raw::c_void,
            readValue: *mut ::std::os::raw::c_int,
            paramIndex: ::std::os::raw::c_int,
            timoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_ConfigFactoryDefault(
            handle: *mut ::std::os::raw::c_void,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_SetYaw(
            handle: *mut ::std::os::raw::c_void,
            angleDeg: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_AddYaw(
            handle: *mut ::std::os::raw::c_void,
            angleDeg: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_SetYawToCompass(
            handle: *mut ::std::os::raw::c_void,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_SetFusedHeading(
            handle: *mut ::std::os::raw::c_void,
            angleDeg: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_AddFusedHeading(
            handle: *mut ::std::os::raw::c_void,
            angleDeg: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_SetFusedHeadingToCompass(
            handle: *mut ::std::os::raw::c_void,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_SetAccumZAngle(
            handle: *mut ::std::os::raw::c_void,
            angleDeg: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_SetTemperatureCompensationDisable(
            handle: *mut ::std::os::raw::c_void,
            bTempCompDisable: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_SetCompassDeclination(
            handle: *mut ::std::os::raw::c_void,
            angleDegOffset: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_SetCompassAngle(
            handle: *mut ::std::os::raw::c_void,
            angleDeg: f64,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_EnterCalibrationMode(
            handle: *mut ::std::os::raw::c_void,
            calMode: ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetGeneralStatus(
            handle: *mut ::std::os::raw::c_void,
            state: *mut ::std::os::raw::c_int,
            currentMode: *mut ::std::os::raw::c_int,
            calibrationError: *mut ::std::os::raw::c_int,
            bCalIsBooting: *mut ::std::os::raw::c_int,
            tempC: *mut f64,
            upTimeSec: *mut ::std::os::raw::c_int,
            noMotionBiasCount: *mut ::std::os::raw::c_int,
            tempCompensationCount: *mut ::std::os::raw::c_int,
            lastError: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetLastError(
            handle: *mut ::std::os::raw::c_void,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_Get6dQuaternion(
            handle: *mut ::std::os::raw::c_void,
            wxyz: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetYawPitchRoll(
            handle: *mut ::std::os::raw::c_void,
            ypr: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetAccumGyro(
            handle: *mut ::std::os::raw::c_void,
            xyz_deg: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetAbsoluteCompassHeading(
            handle: *mut ::std::os::raw::c_void,
            value: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetCompassHeading(
            handle: *mut ::std::os::raw::c_void,
            value: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetCompassFieldStrength(
            handle: *mut ::std::os::raw::c_void,
            value: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetTemp(
            handle: *mut ::std::os::raw::c_void,
            value: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetState(
            handle: *mut ::std::os::raw::c_void,
            state: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetUpTime(
            handle: *mut ::std::os::raw::c_void,
            value: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetRawMagnetometer(
            handle: *mut ::std::os::raw::c_void,
            rm_xyz: *mut ::std::os::raw::c_short,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetBiasedMagnetometer(
            handle: *mut ::std::os::raw::c_void,
            bm_xyz: *mut ::std::os::raw::c_short,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetBiasedAccelerometer(
            handle: *mut ::std::os::raw::c_void,
            ba_xyz: *mut ::std::os::raw::c_short,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetRawGyro(
            handle: *mut ::std::os::raw::c_void,
            xyz_dps: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetAccelerometerAngles(
            handle: *mut ::std::os::raw::c_void,
            tiltAngles: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetFusedHeading2(
            handle: *mut ::std::os::raw::c_void,
            bIsFusing: *mut ::std::os::raw::c_int,
            bIsValid: *mut ::std::os::raw::c_int,
            value: *mut f64,
            lastError: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetFusedHeading1(
            handle: *mut ::std::os::raw::c_void,
            value: *mut f64,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetResetCount(
            handle: *mut ::std::os::raw::c_void,
            value: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetResetFlags(
            handle: *mut ::std::os::raw::c_void,
            value: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetFirmwareVersion(
            handle: *mut ::std::os::raw::c_void,
            firmwareVers: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_HasResetOccurred(
            handle: *mut ::std::os::raw::c_void,
            hasReset: *mut bool,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_SetLastError(
            handle: *mut ::std::os::raw::c_void,
            value: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetFaults(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetStickyFaults(
            handle: *mut ::std::os::raw::c_void,
            param: *mut ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_ClearStickyFaults(
            handle: *mut ::std::os::raw::c_void,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_SetStatusFramePeriod(
            handle: *mut ::std::os::raw::c_void,
            frame: ::std::os::raw::c_int,
            periodMs: u8,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_GetStatusFramePeriod(
            handle: *mut ::std::os::raw::c_void,
            frame: ::std::os::raw::c_int,
            periodMs: *mut ::std::os::raw::c_int,
            timeoutMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
    extern "C" {
        pub fn c_PigeonIMU_SetControlFramePeriod(
            handle: *mut ::std::os::raw::c_void,
            frame: ::std::os::raw::c_int,
            periodMs: ::std::os::raw::c_int,
        ) -> root::ctre::phoenix::ErrorCode;
    }
}
